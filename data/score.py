__author__ = 'justin'
import pygame
import interface
import colour
import menu_item

def read_score(file):
    """Returns the player name and their score in a list contained in list which is sorted from hgih -> low
    read_score(str) -> [[str, int], [str, int], .....]
    Precondition: file exists in directory
    """
    with open(file, 'rU') as fp:
        score = [line.split() for line in fp if line.strip()[0] != '#']
        score = sorted(score, lambda x, y: cmp(int(x[1]), int(y[1])), None, True)
        return score

def write_score(file, lst):
    """Given a file and the name + score in a list, appends this info to file
    write_score(str, [str, int]) -> None
    """
    with open(file, 'a+') as fp:
        lst = map(str, lst)
        fp.write("  ".join(lst))
        fp.write("\n")

def clear_score(file):
    """Clears the high score file"""
    with open(file, 'w') as fp:
        fp.write("#Do not edit this file\n")

#write_score("highscores.txt", ["Jordan", 5674])
#print read_score("highscores.txt")

class Score(object):
    def __init__(self, x, y):
        self._score = 0
        self._text = interface.ArcadeText(x, y, 20, colour.GREEN)
        self.update_score()

    def update_score(self, amount=0):
        self._score += amount
        if self._score < 0:
            self._score = 0
        self._text.render("Score: " + str(self._score))

    def get_score(self):
        return self._score

    def render(self):
        self._text.render("Score: " + str(self._score))


class ScoreScreen(object):
    def __init__(self, sound, score=0):
        self.screen = pygame.display.get_surface()
        self.clock = pygame.time.Clock()
        self.sound = sound
        self._width = self.screen.get_width()
        self._height = self.screen.get_height()
        self._first = interface.TextCenter(self._width/2, self._height*0.1, 30, colour.GREEN)
        self._second = interface.TextCenter(self._width/2, self._height*0.2, 30, colour.GREEN)
        self._name_col = interface.TextCenter(self._width*0.35, self._height*0.3, 20, colour.RED)
        self._score_col = interface.TextCenter(self._width*0.65, self._height*0.3, 20, colour.RED)
        self._bg = interface.StarBackground()
        self._paused = True
        self._score = score

    def _OK(self):
        self._paused = False

    def _clear_score(self):
        clear_score("data/highscores.txt")
        self.high_score()

    def enter_score(self):
        name_text = interface.TextCenter(self._width/2, self._height*0.5, 20, colour.BLUE)
        name = ""
        self._paused = True
        while self._paused:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    raise SystemExit
                if event.type == pygame.KEYDOWN:     #and event.key == pygame.K_RETURN:
                    key = pygame.key.name(event.key)
                    if key in "abcdefghijklmnopqrstuvwxyz":
                        name += key
                    elif key == "space":
                        name += '_'
                    elif key == "backspace":
                        name = name[:-1]
                    elif key == "return":
                        write_score("data/highscores.txt", [name, self._score])
                        self._paused = False
                        break
            self._bg.update()
            self._first.render("Your score was " + str(self._score))
            self._second.render("Please Enter Your Name")
            name_text.render(name)
            self.clock.tick(80)
            pygame.display.update()
        self.high_score()

    def high_score(self):
        data = read_score("data/highscores.txt")[:10]
        items = [[menu_item.MenuSelect("Clear", self._clear_score, 20),
                      menu_item.MenuSelect("OK", self._OK, 20)]]
        selection = menu_item.BasicMenu(items, (0.35, 0.9), 140, 0)
        selection.set_first([1, 0])
        self._paused = True
        while self._paused:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    raise SystemExit
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_RETURN:
                        selection.run()
                        break
                    elif event.key == pygame.K_RIGHT:
                        selection.move_across(1)
                        self.sound.play_select()
                    elif event.key == pygame.K_LEFT:
                        selection.move_across(-1)
                        self.sound.play_select()

            self._bg.update()
            selection.update()
            self._first.render("HIGH SCORES")
            self._second.render("NAME             SCORE")
            self._draw_scores(data, self._height*0.3)
            self.clock.tick(80)
            pygame.display.update()

    def _draw_scores(self, data, starty):
        for i, score in enumerate(data):
            self._name_col.set_y(starty + i*40)
            self._score_col.set_y(starty + i*40)
            self._name_col.render(score[0])
            self._score_col.render(str(score[1]))